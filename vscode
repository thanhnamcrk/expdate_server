// DataTab.js
import React, { useState } from 'react';
import { authFetch } from './utils/authFetch';
import config from './config.json';
import MessageBox from './components/MessageBox';

const API_URL = config.server;

const DataTab = ({ groupData, setGroupData, updateUserCounts }) => {
  const [modalUser, setModalUser] = useState(null);
  const [modalItems, setModalItems] = useState([]);
  const [modalLoading, setModalLoading] = useState(false);
  const [modalError, setModalError] = useState(null);

  // Khởi tạo cache toàn cục nếu chưa có
  if (!window._userItemsCache) window._userItemsCache = {};

  const handleCardClick = (user) => {
    setModalUser(user);
    setModalError(null);
    // Nếu đã có cache thì hiển thị ngay
    if (window._userItemsCache[user.id]) {
      setModalItems(window._userItemsCache[user.id]);
      setModalLoading(false);
    } else {
      setModalLoading(true);
      authFetch(`${API_URL}/api/accounts/items/user/${user.id}/`, { method: 'GET' })
        .then(res => res.json())
        .then(data => {
          const items = data.items || [];
          setModalItems(items);
          window._userItemsCache[user.id] = items; // Lưu vào cache
        })
        .catch(() => setModalError('Không thể tải dữ liệu sản phẩm của user này.'))
        .finally(() => setModalLoading(false));
    }
  };

  const handleCloseModal = () => {
    setModalUser(null);
    setModalItems([]);
    setModalError(null);
  };

  // Expose setModalItems và modalUser ra window để Home.js có thể cập nhật UI modal ngay khi thêm item mới
  window._setModalItems = setModalItems;
  window._lastModalUserId = modalUser ? modalUser.id : null;

  // Xử lý xóa item
  const handleDeleteItem = async (itemId) => {
    if (!window.confirm('Bạn có chắc chắn muốn xóa sản phẩm này?')) return;
    try {
      const res = await authFetch(`${API_URL}/api/items/${itemId}/`, { method: 'DELETE' });
      if (!res.ok) throw new Error('Xóa thất bại');
      // Xóa khỏi cache và UI
      if (modalUser && window._userItemsCache[modalUser.id]) {
        window._userItemsCache[modalUser.id] = window._userItemsCache[modalUser.id].filter(i => i.id !== itemId);
        setModalItems(window._userItemsCache[modalUser.id]);
      }
    } catch (e) {
      alert('Lỗi khi xóa sản phẩm!');
    }
  };

  // Sửa inline: lưu trạng thái editing
  const [editingItemId, setEditingItemId] = useState(null);
  const [editForm, setEditForm] = useState({ itemname: '', barcode: '', quantity: '', expdate: '' });

  const handleEditClick = (item) => {
    setEditingItemId(item.id);
    setEditForm({
      itemname: item.itemname,
      barcode: item.barcode,
      quantity: item.quantity,
      expdate: item.expdate,
    });
  };

  const handleEditChange = (e) => {
    setEditForm({ ...editForm, [e.target.name]: e.target.value });
  };

  const handleEditSave = async (itemId) => {
    try {
      // Đúng chuẩn RESTful: PUT /api/items/<item_id>/
      const res = await authFetch(`${API_URL}/api/items/${itemId}/`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(editForm),
      });
      if (!res.ok) throw new Error('Cập nhật thất bại');
      const data = await res.json();
      // Cập nhật cache và UI
      if (modalUser && window._userItemsCache[modalUser.id]) {
        window._userItemsCache[modalUser.id] = window._userItemsCache[modalUser.id].map(i =>
          i.id === itemId ? { ...i, ...editForm } : i
        );
        setModalItems(window._userItemsCache[modalUser.id]);
      }
      setEditingItemId(null);
    } catch (e) {
      alert('Lỗi khi cập nhật sản phẩm!');
    }
  };

  const handleEditCancel = () => {
    setEditingItemId(null);
  };

  return (
    <div className="container mt-4">
      <h4>Thống kê sản phẩm theo người dùng trong nhóm</h4>
      {groupData && groupData.users && groupData.users.length > 0 ? (
        <div className="row g-3">
          {groupData.users.map(user => (
            <div className="col-12 col-md-6 col-lg-4" key={user.id}>
              <div className="card h-100 shadow-sm" style={{ cursor: 'pointer' }} onClick={() => handleCardClick(user)}>
                <div className="card-body text-center">
                  <h5 className="card-title mb-2">{user.full_name}</h5>
                  <div className="mb-2"><span className="text-danger fw-bold">Đã hết hạn: {user.expired_count}</span></div>
                  <div className="mb-2"><span className="text-warning fw-bold">Sắp hết hạn: {user.soon_expire_count}</span></div>
                  <div><span className="text-success fw-bold">Còn hạn: {user.valid_count}</span></div>
                </div>
              </div>
            </div>
          ))}
        </div>
      ) : (
        <div>Không có dữ liệu nhóm.</div>
      )}

      {/* Modal hiển thị sản phẩm của user */}
      {modalUser && (
        <>
          <div className="modal-backdrop fade show" style={{ zIndex: 1050 }}></div>
          <div className="modal fade show" style={{ display: 'block', background: 'rgba(0,0,0,0.5)', zIndex: 1060 }} tabIndex="-1">
            <div className="modal-dialog modal-fullscreen m-0" style={{ width: '100vw', height: '100vh', maxWidth: '100vw' }}>
              <div className="modal-content" style={{ height: '100vh', display: 'flex', flexDirection: 'column' }}>
                <div className="modal-header">
                  <h5 className="modal-title">Sản phẩm của {modalUser.full_name}</h5>
                  <button type="button" className="btn-close" onClick={handleCloseModal}></button>
                </div>
                <div className="modal-body" style={{ overflowY: 'auto', flex: 1 }}>
                  {modalLoading ? (
                    <div className="text-center py-4"><div className="spinner-border" role="status"></div></div>
                  ) : modalError ? (
                    <div className="alert alert-danger">{modalError}</div>
                  ) : modalItems.length === 0 ? (
                    <div>Không có sản phẩm nào.</div>
                  ) : (
                    <div className="row g-3">
                      {modalItems.map(item => (
                        <div className="col-12 col-md-6 col-lg-4" key={item.id}>
                          <div className="card h-100 shadow-sm position-relative">
                            <div className="card-body text-center">
                              {editingItemId === item.id ? (
                                <>
                                  <input className="form-control mb-1" name="itemname" value={editForm.itemname} onChange={handleEditChange} />
                                  <input className="form-control mb-1" name="barcode" value={editForm.barcode} onChange={handleEditChange} />
                                  <input className="form-control mb-1" name="quantity" value={editForm.quantity} onChange={handleEditChange} type="number" />
                                  <input className="form-control mb-2" name="expdate" value={editForm.expdate} onChange={handleEditChange} placeholder="YYYY-MM-DD" />
                                  <div className="d-flex justify-content-center gap-2 mt-2">
                                    <button className="btn btn-sm btn-success" onClick={() => handleEditSave(item.id)}>Lưu</button>
                                    <button className="btn btn-sm btn-secondary" onClick={handleEditCancel}>Hủy</button>
                                  </div>
                                </>
                              ) : (
                                <>
                                  <h6 className="card-title mb-2">{item.itemname}</h6>
                                  <div className="mb-1"><span className="fw-bold">Mã vạch:</span> {item.barcode}</div>
                                  <div className="mb-1"><span className="fw-bold">Số lượng:</span> {item.quantity}</div>
                                  <div className="mb-2"><span className="fw-bold">Hạn sử dụng:</span> {item.expdate}</div>
                                  <div className="d-flex justify-content-center gap-2 mt-2">
                                    <button className="btn btn-sm btn-outline-primary" onClick={() => handleEditClick(item)}>Sửa</button>
                                    <button className="btn btn-sm btn-outline-danger" onClick={() => handleDeleteItem(item.id)}>Xóa</button>
                                  </div>
                                </>
                              )}
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
                {/* modal-footer removed */}
              </div>
            </div>
          </div>
        </>
      )}
    </div>
  );
};

export default DataTab;